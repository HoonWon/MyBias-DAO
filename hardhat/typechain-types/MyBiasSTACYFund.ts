/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MyBiasSTACYFundInterface extends utils.Interface {
  functions: {
    "_WETH()": FunctionFragment;
    "_withdrawalAddress()": FunctionFragment;
    "depositMatic()": FunctionFragment;
    "depositWETH(uint256)": FunctionFragment;
    "getMaticBalance()": FunctionFragment;
    "getWETHBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawAllMatic()": FunctionFragment;
    "withdrawAllWETH()": FunctionFragment;
    "withdrawMatic(uint256)": FunctionFragment;
    "withdrawWETH(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_withdrawalAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositMatic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositWETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaticBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWETHBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllMatic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllWETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMatic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWETH",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_withdrawalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaticBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWETHBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllMatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWETH",
    data: BytesLike
  ): Result;

  events: {
    "DepositMatic(uint256)": EventFragment;
    "DepositWETH(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WithdrawAllWETH(uint256,address)": EventFragment;
    "WithdrawMatic(uint256,address)": EventFragment;
    "WithdrawWETH(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositMatic"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositWETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawAllWETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawMatic"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawWETH"): EventFragment;
}

export type DepositMaticEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type DepositMaticEventFilter = TypedEventFilter<DepositMaticEvent>;

export type DepositWETHEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type DepositWETHEventFilter = TypedEventFilter<DepositWETHEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type WithdrawAllWETHEvent = TypedEvent<
  [BigNumber, string],
  { amount: BigNumber; to: string }
>;

export type WithdrawAllWETHEventFilter = TypedEventFilter<WithdrawAllWETHEvent>;

export type WithdrawMaticEvent = TypedEvent<
  [BigNumber, string],
  { amount: BigNumber; to: string }
>;

export type WithdrawMaticEventFilter = TypedEventFilter<WithdrawMaticEvent>;

export type WithdrawWETHEvent = TypedEvent<
  [BigNumber, string],
  { amount: BigNumber; to: string }
>;

export type WithdrawWETHEventFilter = TypedEventFilter<WithdrawWETHEvent>;

export interface MyBiasSTACYFund extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MyBiasSTACYFundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _WETH(overrides?: CallOverrides): Promise<[string]>;

    _withdrawalAddress(overrides?: CallOverrides): Promise<[string]>;

    depositMatic(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositWETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMaticBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWETHBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllMatic(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllWETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawMatic(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawWETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _WETH(overrides?: CallOverrides): Promise<string>;

  _withdrawalAddress(overrides?: CallOverrides): Promise<string>;

  depositMatic(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositWETH(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMaticBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getWETHBalance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllMatic(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllWETH(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawMatic(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawWETH(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _WETH(overrides?: CallOverrides): Promise<string>;

    _withdrawalAddress(overrides?: CallOverrides): Promise<string>;

    depositMatic(overrides?: CallOverrides): Promise<void>;

    depositWETH(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getMaticBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getWETHBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllMatic(overrides?: CallOverrides): Promise<void>;

    withdrawAllWETH(overrides?: CallOverrides): Promise<void>;

    withdrawMatic(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawWETH(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositMatic(uint256)"(amount?: null): DepositMaticEventFilter;
    DepositMatic(amount?: null): DepositMaticEventFilter;

    "DepositWETH(uint256)"(amount?: null): DepositWETHEventFilter;
    DepositWETH(amount?: null): DepositWETHEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "WithdrawAllWETH(uint256,address)"(
      amount?: null,
      to?: null
    ): WithdrawAllWETHEventFilter;
    WithdrawAllWETH(amount?: null, to?: null): WithdrawAllWETHEventFilter;

    "WithdrawMatic(uint256,address)"(
      amount?: null,
      to?: null
    ): WithdrawMaticEventFilter;
    WithdrawMatic(amount?: null, to?: null): WithdrawMaticEventFilter;

    "WithdrawWETH(uint256,address)"(
      amount?: null,
      to?: null
    ): WithdrawWETHEventFilter;
    WithdrawWETH(amount?: null, to?: null): WithdrawWETHEventFilter;
  };

  estimateGas: {
    _WETH(overrides?: CallOverrides): Promise<BigNumber>;

    _withdrawalAddress(overrides?: CallOverrides): Promise<BigNumber>;

    depositMatic(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositWETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMaticBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getWETHBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllMatic(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllWETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawMatic(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawWETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _withdrawalAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositMatic(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositWETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMaticBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWETHBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllMatic(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllWETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMatic(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawWETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
